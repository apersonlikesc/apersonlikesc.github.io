{"randomArticles":[{"articleTitle":"剑指offer_Part6","articleAbstractText":"友情提示: 代码在这里 本文参照该仓库学习,大家可以star 50 第一个只出现一次的字符位置 在一个字符串中找到第一个只出现一次的字符，并返回它的位置。 最直观的解法是使用 HashMap 对出现次数进行统计，但是考虑到要统计的字符范围有限，因此可以使用整型数组代替 HashMap。 以上实现的空间复杂度还不是最优的。考虑到只需要找到只出现一次的字符，那么需要统计的次数信息只有 0,1,更大，使用两个比特位就能存储这些信息。 51 数组中的逆序对 在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007 52 两个链表的第一个公共结点 设 A 的长度为 a + c，B 的长度为 b + c，其中 c 为尾部公共部分长度，可知 a + c + b = b + c + a。 当访问链表 A 的指针访问到链表尾部时，令它从链表 B 的头部重新开始访问链表 B；同样地，当访问链表 B 的指针访问到链表尾部时，令它从链表 A 的头部重新开始访问链表 ....","articleStatus":0,"articlePermalink":"/articles/2019/04/12/1561009669327.html","articleImg1URL":"https://img.hacpai.com/bing/20190614.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Linux From Scrach Pass 1","articleAbstractText":"准备 准备空间大概8g 准备在u盘上构建系统 我准备将u盘对半分成两个盘 一个安装系统,就用ext4 一个当作普通的u盘来用 记得分区的时候格式化 可以使用fdisk 或者 其他工具 另外: 我的arch上没有创建swap分区 挂载U盘/移动硬盘 使用fdisk -l命令 得到 Disk /dev/sdb：29 GiB，31104958464 字节，60751872 个扇区 单元：扇区 / 1 * 512 = 512 字节 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘标签类型：dos 磁盘标识符：0xcad4ebea 设备 启动 起点 末尾 扇区 大小 Id 类型 /dev/sdb4 * 63 60751871 60751809 29G c W95 FAT32 (LBA) 创建文件夹 将sdb4挂载到文件夹上 一般u盘会自动挂载,像我的系统就是挂载到run/s/xxx 下面 不过官方建议还是挂载到 /mnt/lfs 下面 mount -v -t ext4 /dev/&lt;xxx&gt; $LFS # 将 /\u2026....","articleStatus":0,"articlePermalink":"/articles/2018/07/12/1561009681962.html","articleImg1URL":"https://img.hacpai.com/bing/20181113.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"操作系统之内存","articleAbstractText":"本文采用复习拷贝重新阅读大法 本文来自该仓库 虚拟内存 虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。 为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。 从上面的描述中可以看出，虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。例如有一台计算机可以产生 16 位地址，那么一个程序的地址空间范围是 0~64K。该计算机只有 32KB 的物理内存，虚拟内存技术允许该计算机运行一个 64K 大小的程序。 这需要页面置换算法来辅助 分页系统地址映射 内存管理单元（MMU）管理着地址空间和物理内存的转换，其中的页表（Page table）存储着页（程序地址空间）和页框（物理内存空间）的映射表。 一个虚拟\u2026.","articleStatus":0,"articlePermalink":"/articles/2019/04/13/1561009682385.html","articleImg1URL":"https://gitee.com/CyC2018/CS-Notes/raw/master/docs/pics/7b281b1e-0595-402b-ae35-8c91084c33c1.png"},{"articleTitle":"剑指offer_Part4","articleAbstractText":"友情提示: 代码在这里 本文参照该仓库学习,大家可以star 30 包含 min 函数的栈 定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的 min 函数。 31 栈的压入、弹出序列 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。 例如序列 1,2,3,4,5 是某栈的压入顺序，序列 4,5,3,2,1 是该压栈序列对应的一个弹出序列，但 4,3,5,1,2 就不可能是该压栈序列的弹出序列。 32 从上往下打印二叉树 从上往下打印出二叉树的每个节点，同层节点从左至右打印。 使用队列来进行层次遍历 32-2 把二叉树打印成多行 和上一题一样使用队列 32-3 按之字形顺序打印二叉树 请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。采用reverse() 33 二叉搜索树的后序遍历序列 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。假设输入的数组的任意两个数字都互不相同。 链接：https://www....","articleStatus":0,"articlePermalink":"/articles/2019/04/09/1561009686522.html","articleImg1URL":"https://img.hacpai.com/bing/20181005.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}