{"relevantArticles":[{"articleTitle":"Spring Pass 2","articleAbstractText":"Spring Bean 作用域(设置scope) 当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。例如，为了强制 Spring 在每次需要时都产生一个新的 bean 实例，你应该声明 bean 的作用域的属性为 prototype。同理，如果你想让 Spring 在每次需要时都返回同一个bean实例，你应该声明 bean 的作用域的属性为 singleton。 Spring 框架支持以下五个作用域，如果你使用 web-aware ApplicationContext 时，其中三个是可用的。 作用域 |描述 \u2013|\u2013 singleton | 在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值(每次get到的都是上次的旧的) prototype |每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()(获得的是一个全新的对象) request |每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境 session|....","articleStatus":0,"articlePermalink":"/articles/2018/09/11/1561009681011.html","articleImg1URL":"https://img.hacpai.com/bing/20180423.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Pass 4","articleAbstractText":"Spring Beans 自动装配 你已经学会如何使用&lt;bean&gt;元素来声明 bean 和通过使用 XML 配置文件中的和元素来注入 。 Spring 容器可以在不使用和 元素的情况下自动装配相互协作的 bean 之间的关系，这有助于减少编写一个大的基于 Spring 的应用程序的 XML 配置的数量。 自动装配模式 下列自动装配模式，它们可用于指示 Spring 容器为来使用自动装配进行依赖注入。你可以使用元素的 autowire 属性为一个 bean 定义指定自动装配模式。 模式| 描述 \u2013|\u2013 no| 这是默认的设置，它意味着没有自动装配，你应该使用显式的bean引用来连线。你不用为了连线做特殊的事。在依赖注入章节你已经看到这个了。 byName| 由属性名自动装配。Spring 容器看到在 XML 配置文件中 bean 的自动装配的属性设置为 byName。然后尝试匹配，并且将它的属性与在配置文件中被定义为相同名称的 beans 的属性进行连接。 byType| 由属性数据类型自动装配。Spring 容器看到在 XML 配置文件中 bean 的自动装配的属性设置为 ....","articleStatus":0,"articlePermalink":"/articles/2018/09/12/1561009684949.html","articleImg1URL":"https://img.hacpai.com/bing/20180619.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Springmvc阶段性总结","articleAbstractText":"Springmvc的阶段性总结 首先第一个体验就是boot的配置确实简单一点 0. springboot使用的是java配置以及application.properties文件中的赋值语句的配置 pom.xml的形式 &lt;?xml version=\u201c1.0\u201d encoding=\u201cUTF-8\u201d?&gt; &lt;project xmlns=\u201chttp://maven.apache.org/POM/4.0.0\u201d xmlns:xsi=\u201chttp://www.w3.org/2001/XMLSchema-instance\u201d xsi:schemaLocation=\u201chttp://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u201d&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;mysite&lt;/groupId&gt; &lt;artifactId&gt;design&lt;/artifactId&gt; &lt;ve....","articleStatus":0,"articlePermalink":"/articles/2018/11/25/1561009684738.html","articleImg1URL":"https://img.hacpai.com/bing/20190612.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"使用validation自定义注解","articleAbstractText":"第一步 在pom中引入  &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt; &lt;version&gt;2.1.6.RELEASE&lt;/version&gt; &lt;/dependency&gt;  第二步 创建一个普通的类将至变成注解 @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE }) @Retention(RUNTIME) @Documented @Constraint(validatedBy = {IsMobileValidator.class}) public @interface IsMobile { String message() default \"手机号码格式错误\"; Class&lt;?&gt;[] groups() defa....","articleStatus":0,"articlePermalink":"/articles/2019/12/09/1575889323934.html","articleImg1URL":"https://img.hacpai.com/bing/20181204.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Pass 1","articleAbstractText":"教材:https://www.w3cschool.cn/wkspring/ Spring 概述 spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。 Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下发布。 Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。 Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型 来促进良好的编程实践。 pojo 实际意义就是普通的JavaBeans（简单的实体类），特点就是支持业务逻辑的协助类。 POJO类的作用是方便程序员使用数据库中的数据表，对于程序员来说，可以很方便的将POJO类当作对象来进行使用，也可以方便的调用其get，set方法。 但不允许有\u2026....","articleStatus":0,"articlePermalink":"/articles/2018/09/11/1561009677915.html","articleImg1URL":"https://img.hacpai.com/bing/20181022.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}